parameters:
  name: ''
  displayName: ''
  gfxapi: ''

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  pool:
    vmImage: 'windows-latest'
  variables:
    platform: x64
  strategy:
    matrix:
      Debug:
        configuration: Debug
      Release:
        configuration: Release
  steps:
  - checkout: self
    submodules: recursive
  - template: azure-pipelines-steps-linkedvdk.yml
  - script: curl -OL https://github.com/zellski/FBXSDK-Windows/archive/2019.2.tar.gz
    displayName: 'Download Dependencies'
  - powershell: |
      7z e 2019.2.tar.gz
      7z x 2019.2.tar
      move -v .\FBXSDK-Windows-2019.2\sdk\ .
      choco install zstandard
      zstd -d -r --rm sdk
    displayName: 'Install Dependencies'
  - script: 3rdParty\udcore\bin\premake-bin\premake5.exe vs2019 --gfxapi=${{ parameters.gfxapi }} --fbxsdk=$(Build.SourcesDirectory)/sdk/Windows/2019.2
    displayName: 'Run Premake'
  - task: MSBuild@1
    displayName: 'Build Projects'
    inputs:
      solution: udStream.sln
      platform: $(platform)
      configuration: $(configuration)
      maximumCpuCount: true
      msbuildArguments: '/v:m'
  - task: DownloadSecureFile@1
    name: codeSignCert
    displayName: 'Download Euclideon Code Signing Certificate'
    inputs:
      secureFile: EPLWindowsSignCert.pfx
    condition: and(succeeded(), eq(variables['configuration'], 'Release'))
  - ${{ if eq(parameters.gfxapi, 'opengl') }}:
    - template: azure-pipelines-steps-codesign.yml
      parameters:
        file: builds\udStream_opengl.exe
  - ${{ if eq(parameters.gfxapi, 'd3d11') }}:
    - template: azure-pipelines-steps-codesign.yml
      parameters:
        file: builds\udStream.exe
  - template: azure-pipelines-steps-codesign.yml
    parameters:
      file: builds\udStreamConvertCMD.exe
  - script: builds\tests\vcTesting.exe --gtest_shuffle --gtest_output=xml
    displayName: 'Run Tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: always()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_detail.xml'
      testRunTitle: ${{ parameters.name }}_$(platform)_$(configuration)
  - bash: pushd builds && rm -rf tests *.pdb && popd
    displayName: 'Clean up Artifacts'
  - publish: builds/
    displayName: 'Publish ThinApp'
    condition: and(succeeded(), eq(variables['configuration'], 'Release'))
    artifact: ${{ parameters.name }}$(configuration)
  - script: |
      pushd buildscripts\installer\windows
      "C:\Program Files (x86)\NSIS\makensis.exe" vaultClient.nsi
      popd
    displayName: 'Build Installer'
    condition: and(succeeded(), eq(variables['configuration'], 'Release'), eq('${{ parameters.gfxapi }}', 'd3d11'))
  - script: |
      pushd buildscripts\installer\windows
      "C:\Program Files (x86)\NSIS\makensis.exe" /DBUILD_SUFFIX=_opengl vaultClient.nsi
      popd
    displayName: 'Build Installer'
    condition: and(succeeded(), eq(variables['configuration'], 'Release'), eq('${{ parameters.gfxapi }}', 'opengl'))
  - template: azure-pipelines-steps-codesign.yml
    parameters:
      file: buildscripts\installer\windows\udStreamSetup.exe
  - publish: buildscripts/installer/windows/udStreamSetup.exe
    displayName: 'Publish Installer'
    condition: and(succeeded(), eq(variables['configuration'], 'Release'))
    artifact: '${{ parameters.name }}_udStreamSetup'
